To send an array in a URL, you can use query parameters and serialize the array into a string representation. Here's an example of how you can achieve this:

Suppose you have an array called $data that you want to send in the URL:

php

$data = array('item1', 'item2', 'item3');

You can serialize the array using the http_build_query() function and append it to the URL:

php

$url = 'http://example.com/endpoint?' . http_build_query(array('data' => $data));

The resulting URL will look like:

perl

http://example.com/endpoint?data%5B0%5D=item1&data%5B1%5D=item2&data%5B2%5D=item3

In the receiving script, you can retrieve the array from the URL by using the $_GET superglobal:

php

$data = $_GET['data'];

The $data variable will contain the array:

php

Array
(
    [0] => item1
    [1] => item2
    [2] => item3
)

Note that when serializing the array, the square brackets ([]) are used to indicate an array. The http_build_query() function handles the URL encoding for you.

Keep in mind that there may be limitations on the maximum length of a URL, so if your array is very large, you might encounter issues. In such cases, you may need to consider alternative methods, such as sending the data via POST request or using session variables.



















idée pour la suite : (je sais pas si ça fonctionne comme ça )

// sur la page d'accueil
session_start(); 
$_SESSION['connexion'] = 'visiteur';

//lors de la connexion
$_SESSION['connexion'] = 'jeune';


// au début de la page jeune
if($_SESSION['connexion'] == 'jeune'){ ok } else { nope}




pour la mise à jour de données dans bdd : 

$bdd=exec(UPDATE utilisateur SET nom='$nouveau_nom', ..., WHERE id='$id');


pour récupération id page referent :
